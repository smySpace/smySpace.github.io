<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>聊一下SVG[可缩放矢量图形（Scalable Vector Graphics）]格式</title>
    <link href="/2024/11/01/svg/"/>
    <url>/2024/11/01/svg/</url>
    
    <content type="html"><![CDATA[<p>说起图片格式,常见的就是png,jpg<br>SVG格式估计也就前端和UI熟悉</p><h3 id="这种格式是什么衍生出来的？"><a href="#这种格式是什么衍生出来的？" class="headerlink" title="这种格式是什么衍生出来的？"></a>这种格式是什么衍生出来的？</h3><p>PNG图像受到分辨率的影响,分辨率越高,图像越清晰.在放大或缩小时,可能会出现锯齿状边缘或失真</p><p>SVG图像不受分辨率的限制,可以无损地放大或缩小,而不会损失图像质量</p><p>故无损的特性,在图标制作领域是首选<br>你所看到的各种icon几乎都是</p><h3 id="初见SVG格式"><a href="#初见SVG格式" class="headerlink" title="初见SVG格式"></a>初见SVG格式</h3><p>PNG存储是数据块(不详细展开)</p><p>而SVG存储的是XML格式的树状的字符串<br>如下</p><pre><code class="hljs"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;red&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure></code></pre><p>这里就是一个 300*200 svg,内部填满一个红色的矩形</p><p>我相信想了解SVG格式 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial">W3C文档更专业</a></p><h3 id="我的工作"><a href="#我的工作" class="headerlink" title="我的工作"></a>我的工作</h3><p>对于设计软件，像pixso,PS，sketch,figma,支持导入导入SVG格式是很基础且必要的功能<br>不过市面的设计软件对SVG的兼容性主要是常用的元素和属性,和浏览器渲染的差距不小</p><p>我的工作就是解析SVG渲染为正确的效果<br>用C++渲染SVG听起来不像21世纪做的事对吧,哈哈哈哈</p><p>如下展示一个图标的结构<br><img src="/2024/11/01/svg/iconpark.png" alt="iconPark"></p><p>这一个小图标是由8条矢量路径组成的,点线坐标+属性理论上可以表示任何复杂的图形,只是成本问题</p><p>说一下这块的实现要求:</p><p>1.还原度,要做到图形的还原</p><p>2.性能,看到这你想 ? 一个小图标会有什么性能问题, 哈哈哈, 我们有用户导入240M+的svg,纯字符串的文件<br>  200多M可想而知几百万行,notpad++打开直接都卡死, 第二版引擎我做到了</p><p>3.可维护性!,这块解析其实还挺复杂,存在属性继承,引用等等,第一版引擎已经不好维护了(第一版也是我设计的)</p><p>思路:</p><p>序列化与反序列化:<br>输入xml content str, 需要输出svg element root的一棵树<br>这棵树必须是完全可用的状态,他的图层结构,属性等等一切</p><p>反之亦然,输入svg element root,能生成xml的内容</p><p><a href="https://github.com/smySpace/svgParseEngine">反序列化的代码</a><br>这部分代码是跑通的版本,已经支持xml的反序列化,序列化的还没有写<br>convert层（svg结构转为对应的Pixso图层）涉及工作保密这里不能开源哈..</p><h3 id="element-h"><a href="#element-h" class="headerlink" title="element.h"></a>element.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SVG_CORE_API</span> Element : <span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;Element&gt;<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">using</span> SP = std::shared_ptr&lt;Element&gt;;<br><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Type</span><br>&#123;<br>Svg,<br>Rect,<br>Polygon,<br>Path,<br>Circle,<br>Ellipse,<br>ClipPath,<br>Line,<br>Polyline,<br>Mask,<br>Filter,<br>FeFlood,<br>FeColorMatrix,<br>FeOffset,<br>FeGaussianBlur,<br>FeDropShadow,<br>FeComposite,<br>FeBlend,<br>G,<br>Desc,<br>Defs,<br>Pattern,<br>Image,<br>Use,<br>LinearGradient,<br>RadialGradient,<br>Stop,<br>Style,<br>Text,<br>Tspan,<br>UnKnow<br>&#125;;<br><br><span class="hljs-built_in">Element</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-built_in">Element</span>(<span class="hljs-type">const</span> SP&amp; other) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clone</span><span class="hljs-params">(SP other)</span></span>;<br><br><span class="hljs-function">Type <span class="hljs-title">getType</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_type; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(Type v)</span> </span>&#123; m_type = v; &#125;<br><br><span class="hljs-function">std::vector&lt;SP&gt; <span class="hljs-title">getChildren</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_children; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setChildren</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;SP&gt;&amp; v)</span> </span>&#123; m_children = v; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addChildren</span><span class="hljs-params">(<span class="hljs-type">const</span> SP&amp; v)</span> </span>&#123; m_children.<span class="hljs-built_in">emplace_back</span>(v); &#125;<br><br><span class="hljs-function">SP <span class="hljs-title">getParent</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_parent; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setParent</span><span class="hljs-params">(<span class="hljs-type">const</span> SP&amp; v)</span> </span>&#123; m_parent = v; &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setIsRoot</span><span class="hljs-params">(<span class="hljs-type">bool</span> root)</span> </span>&#123; m_isRoot = root; &#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">getIsRoot</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_isRoot; &#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">getContent</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_contentStr; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span> </span>&#123; m_contentStr = str; &#125;<br><br><span class="hljs-keyword">public</span>:<br>attribute::Attribute attribute;<br><br><span class="hljs-keyword">private</span>:<br>Type m_type = Type::UnKnow;<br>std::string m_contentStr;<br>std::vector&lt;SP&gt; m_children;<br>SP m_parent = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">bool</span> m_isRoot = <span class="hljs-literal">false</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="attribute-h"><a href="#attribute-h" class="headerlink" title="attribute.h"></a>attribute.h</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml">class Attribute<br>&#123;<br>public:<br>std::optional&lt;std::string&gt; id;<br><br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">ViewBox</span>&gt;</span> viewbox;<br><br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> width;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> height;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> x;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> y;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> rx;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> ry;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> cx;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> cy;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> r;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> dx;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> dy;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> x1;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> x2;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> y1;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> y2;<br><br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">Points</span>&gt;</span> points;<br>std::optional&lt;std::string&gt; d;<br><br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">bool</span>&gt;</span> visibility;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> opacity;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">Fill</span>&gt;</span> fill;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">FillRule</span>&gt;</span> fillRule;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">Fill</span>&gt;</span> stroke;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">LineCap</span>&gt;</span> strokeLineCap;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">LineJoin</span>&gt;</span> strokeLineJoin;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> strokeDashOffset;<br>std::optional&lt;std::vector<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span>&gt; strokeDashArray;<br><br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">Units</span>&gt;</span> gradientUnits;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">Units</span>&gt;</span> filterUnits;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">Units</span>&gt;</span> patternContentUnits;<br><br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">Color</span>&gt;</span> stopColor;<br>std::optional<span class="hljs-tag">&lt;<span class="hljs-name">float</span>&gt;</span> offset;<br>......<br>&#125;<br></code></pre></td></tr></table></figure><p>核心的数据结构就是 element + attribute<br>因为是树状的结构,所有 parent + children 是必须的<br>标识元素的type也很重要, 有这些就够了</p><p>每个元素都可能存在某个属性,所以attribute的数据结构,全部用std::optional的形式<br>其实也就是个指针,这里不展开了</p><p>这样一个简单的扁平的设计就可完美表述这棵’xml树’</p><h3 id="attributeBuilder-h"><a href="#attributeBuilder-h" class="headerlink" title="attributeBuilder.h"></a>attributeBuilder.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">attribute::Number <span class="hljs-title">buildNumber</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span>;<br><span class="hljs-function">attribute::ViewBox <span class="hljs-title">buildViewBox</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span>;<br><span class="hljs-function">attribute::Color <span class="hljs-title">buildColor</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span>;<br><span class="hljs-function">attribute::Fill <span class="hljs-title">buildFill</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str, element::Element::SP sp)</span></span>;<br><span class="hljs-function">attribute::Units <span class="hljs-title">buildUnits</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span>;<br><span class="hljs-function">attribute::Matrix <span class="hljs-title">buildMatrix</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span>;<br><span class="hljs-function">attribute::LineCap <span class="hljs-title">buildLineCap</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span>;<br><span class="hljs-function">attribute::LineJoin <span class="hljs-title">buildLineJoin</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span>;<br><span class="hljs-function">std::vector&lt;<span class="hljs-type">float</span>&gt; <span class="hljs-title">buildDashArray</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str)</span></span>;<br>......<br></code></pre></td></tr></table></figure><p>在递归遍历树时，我们需要解析非标准类型的元素,如上</p><p>眼尖的可能发现为啥fill会需要传入elemet ?</p><p>因为svg的蒙版啊,裁剪,fill等,都可用引用元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xlink</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">defs</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">clipPath</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cut-off-bottom&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">clipPath</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">defs</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">clip-path</span>=<span class="hljs-string">&quot;url(#cut-off-bottom)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span>  <br>  <span class="hljs-comment">&lt;!-- 定义颜色 --&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">defs</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;colorBlock&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;fill:blue;&quot;</span>/&gt;</span>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">defs</span>&gt;</span>  <br>  <br>  <span class="hljs-comment">&lt;!-- 使用定义的颜色填充矩形 --&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;80&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;url(#colorBlock)&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;black&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>故,数据结构需要如下设计,convert时才会省去查找的步骤</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Fill</span><br>&#123;<br>FillType type;<br><br>std::optional&lt;Color&gt; color;<br>std::shared_ptr&lt;element::Element&gt; urlElement = <span class="hljs-literal">nullptr</span>;<br>std::shared_ptr&lt;element::Element&gt; hostElement = <span class="hljs-literal">nullptr</span>;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ClipPath</span><br>&#123;<br>std::shared_ptr&lt;element::Element&gt; urlElement = <span class="hljs-literal">nullptr</span>;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Mask</span><br>&#123;<br>std::shared_ptr&lt;element::Element&gt; urlElement = <span class="hljs-literal">nullptr</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>未完待续……    </p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>本站成立公告</title>
    <link href="/2024/11/01/%E6%9C%AC%E7%AB%99%E8%BF%81%E7%A7%BB/"/>
    <url>/2024/11/01/%E6%9C%AC%E7%AB%99%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<p>最近的四五年很少写笔记了,是有多方面的原因</p><ul><li><p>工作太忙了是借口,其实还是人变懒了</p></li><li><p>缺少一个合适的地方让我写写画画</p></li><li><p>肚子里也没有什么干货,没有分享欲</p></li><li><p><a href="https://shenmingyi.blog.csdn.net/">My Csdn</a> 我的csdn前前后后7,8年也是写了几百篇了,现在一看文章质量惨不忍睹…<br>120w+的访问量,本想继续写,可这个平台我是真不想在登录了,广告满天飞,想复制个代码还要登录,甚至还要关注&#x2F;开通VIP<br>这不符合开源的精神,吃相属实难看</p><p>还要吐槽一下,csdn平台的文章质量确实偏低,看N篇才能找到我想要的东西,但是在百度的搜索权重占的还靠前<br>谈csdn色变啊,很多程序员现在都很厌恶这个平台,再次降低了我想要更新的欲望</p></li></ul><p>所以本站成立了,这个地方足够清净,好好维护我这一亩三分地,谢谢诸位!</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
